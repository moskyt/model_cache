h1. ModelCache

ModelCache is a simple caching plugin for Rails, using @memcached@. It provides caching abilities for your models, allowing to:
* cache blocks of code in your model instance methods, based on a generic key (ActiveRecord @cache_key@ is added behind the scenes)
* cache your instance methods, optionally with a time-to-live setting
* cache some generic code (e.g. in your class methods)

Both memcached client gems, @memcache-client@ and @memcached@ are supported. You are just expected to create an instance of the client and store it in the @CACHE@ constant.

h1. Installation

p. As a gem:

bc. gem install model-cache

p. As a plugin:

bc. script/plugin install git://github.com/moskyt/model_cache.git

or 

bc. script/plugin install http://github.com/moskyt/model_cache.git

h1. Example

p. Create an initializer, for example @config/initializers/memcached.rb@, containing this code (if you are using @memcache-client@):

bc. require 'memcache'
CACHE = MemCache.new('127.0.0.1')

p. or, if using @memcached@ gem:

bc. require 'memcached'
CACHE = Memcached.new('127.0.0.1')

p. Your model:

bc.. class Stuff < ActiveRecord::Base

	def expensive_method
		...
	end
	
	def another_expensive_method
		...
	end
	
	cache_method :expensive_method, :another_expensive_method
	
	def third_expensive_method
		...
	end
	
	cache_method :third_expensive_method, :time => 1.hour
	
	def partially_expensive_method
		...
		cache :calculation do
			...
		end
	end
	
	def self.some_class_method
		ModelCache.cache(:this_would_be_persistent, 5.minutes) do
			...
		end
	end

end

p. If you want to cache somewhere else than in _ActiveRecord::Base_ classes, you need to include the module explicitly:

bc.. class Another
  include ModelCache
  
	def expensive_method
		...
	end
	
	cache_method :expensive_method  
end

p. Copyright (c) 2010 Frantisek Havluj, released under the MIT license
